// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nexplorer.Data.Context;

namespace Nexplorer.Data.Migrations
{
    [DbContext(typeof(NexusDb))]
    [Migration("20181012222515_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FirstBlockHeight");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("AddressId");

                    b.HasIndex("FirstBlockHeight");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.AddressAggregate", b =>
                {
                    b.Property<int>("AddressId");

                    b.Property<double>("Balance");

                    b.Property<int>("LastBlockHeight");

                    b.Property<double>("ReceivedAmount");

                    b.Property<int>("ReceivedCount");

                    b.Property<double>("SentAmount");

                    b.Property<int>("SentCount");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("AddressId");

                    b.HasIndex("LastBlockHeight");

                    b.ToTable("AddressAggregate");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.Block", b =>
                {
                    b.Property<int>("Height");

                    b.Property<string>("Bits");

                    b.Property<int>("Channel");

                    b.Property<double>("Difficulty");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("MerkleRoot");

                    b.Property<double>("Mint");

                    b.Property<double>("Nonce");

                    b.Property<int>("Size");

                    b.Property<DateTime>("TimeUtc");

                    b.Property<int>("Version");

                    b.HasKey("Height");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("BlockHeight");

                    b.Property<int>("Confirmations");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeUtc");

                    b.HasKey("TransactionId");

                    b.HasIndex("BlockHeight");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.TransactionInput", b =>
                {
                    b.Property<int>("TransactionInputId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<double>("Amount");

                    b.Property<int>("TransactionId");

                    b.HasKey("TransactionInputId");

                    b.HasIndex("AddressId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionInput");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.TransactionOutput", b =>
                {
                    b.Property<int>("TransactionOutputId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<double>("Amount");

                    b.Property<int>("TransactionId");

                    b.HasKey("TransactionOutputId");

                    b.HasIndex("AddressId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionOutput");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.TrustKey", b =>
                {
                    b.Property<int>("TrustKeyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("GenesisBlockHeight");

                    b.Property<string>("Hash")
                        .IsRequired();

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<int>("TransactionId");

                    b.HasKey("TrustKeyId");

                    b.HasIndex("AddressId");

                    b.HasIndex("GenesisBlockHeight");

                    b.HasIndex("TransactionId");

                    b.ToTable("TrustKey");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Exchange.BittrexSummary", b =>
                {
                    b.Property<int>("BittrexSummaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Ask");

                    b.Property<double>("BaseVolume");

                    b.Property<double>("Bid");

                    b.Property<double>("Last");

                    b.Property<string>("MarketName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("OpenBuyOrders");

                    b.Property<int>("OpenSellOrders");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<double>("Volume");

                    b.HasKey("BittrexSummaryId");

                    b.ToTable("BittrexSummary");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Orphan.OrphanBlock", b =>
                {
                    b.Property<int>("BlockId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Height");

                    b.Property<DateTime>("TimeUtc");

                    b.HasKey("BlockId");

                    b.ToTable("OrphanBlock");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Orphan.OrphanTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlockHeight");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("OrphanBlockBlockId");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrphanBlockBlockId");

                    b.ToTable("OrphanTransaction");
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.Address", b =>
                {
                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Block", "FirstBlock")
                        .WithMany()
                        .HasForeignKey("FirstBlockHeight")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.AddressAggregate", b =>
                {
                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Block", "LastBlock")
                        .WithMany()
                        .HasForeignKey("LastBlockHeight")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.Transaction", b =>
                {
                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockHeight")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.TransactionInput", b =>
                {
                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Transaction", "Transaction")
                        .WithMany("Inputs")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.TransactionOutput", b =>
                {
                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Transaction", "Transaction")
                        .WithMany("Outputs")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Blockchain.TrustKey", b =>
                {
                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Block", "GenesisBlock")
                        .WithMany()
                        .HasForeignKey("GenesisBlockHeight")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nexplorer.Domain.Entity.Blockchain.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nexplorer.Domain.Entity.Orphan.OrphanTransaction", b =>
                {
                    b.HasOne("Nexplorer.Domain.Entity.Orphan.OrphanBlock")
                        .WithMany("Transactions")
                        .HasForeignKey("OrphanBlockBlockId");
                });
#pragma warning restore 612, 618
        }
    }
}
