@using System.Globalization
@using Nexplorer.Domain.Enums
@using Nexplorer.Web.Enums
@using Nexplorer.Web.Extensions
@model AddressViewModel

@{
    ViewBag.Title = $"Address - {Model.Address.Hash}";
    Layout = "_Layout";
}

@section Head {
    <link rel="stylesheet" href="@ViewBag.ControllerCss" />
}

@section Header {
    <div id="hero" class="jumbotron jumbotron-fluid"></div>
    <div id="heroText" class="jumbotron jumbotron-fluid">
        <div class="container-fluid max-width">
			<div id="heroHeader">
			    <div class="row row-center-sm">
			        <div class="col-sm-push-10 col-sm-2 text-right-sm">
			            <div ref="identicon" class="identicon-icon">
			                <div class="identicon" v-html="identiconSvg"></div>
			            </div>
			        </div>
			        <div class="col-sm-pull-2 col-sm-10 title">
			            <h1>
			                ADDRESS
			                @if (User.Identity.IsAuthenticated)
			                {
			                    <a class="watch-address" href="#" v-on:click.prevent.stop="watchAddress" v-bind:alt="isAddressWatched ? 'Remove from favourites' : 'Add to favourites'">
			                        <span v-bind:class="isAddressWatched ? 'fa fa-star yellow' : 'fa fa-star-o'"></span>
			                    </a>
			                }
			            </h1>
			            @if (User.Identity.IsAuthenticated && Model.IsUserFavourite && !string.IsNullOrWhiteSpace(Model.AddressAlias))
			            {
			                <h2 class="title-hash">{{ addressOnShow }}</h2>
			                <a href="#" v-on:click.prevent.stop="flipAddress">{{ addressOnShowLink }}</a>
			            }
			            else
			            {
			                <h2 class="title-hash">@Model.Address.Hash</h2>
			            }
			        </div>
			    </div>
			</div>
        </div>
    </div>
}

<div class="row">
    <div class="col-sm-4">
        <div class="panel">
            <div class="row">
                <div class="col-xs-9">
                    <h2>VALUE</h2>
                </div>
                <div class="col-xs-3 text-right">
                    <span class="fa fa-balance-scale"></span>
                </div>
            </div>
            <h3>Balance</h3>
            <p class="val">@Model.Address.Balance.ToCurrencyString() <span style="font-size: 10px;">NXS</span></p>
            <h3>Fiat Value</h3>
            <p class="val">
                <currency-helper :currency-index="'@Model.NxsCurrency.Currency.ToString()'" :currency-value="@Model.NxsCurrency.NXSValue"></currency-helper>
            </p>
            <h3>Bitcoin Value</h3>
            <p class="val">@Model.NxsCurrency.BTCValue.ToCurrencyString() <span class="fa fa-btc fa-inline-lg"></span></p>
        </div>
    </div>

    <div class="col-sm-5">
        <div class="panel">
            <div class="row">
                <div class="col-xs-9">
                    <h2>TRANSACTIONS</h2>
                </div>
                <div class="col-xs-3 text-right">
                    <span class="fa fa-exchange"></span>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <h3>Received</h3>
                    <p class="val">@Model.Address.ReceivedCount.ToString("N2")</p>
                    <h3>Sent</h3>
                    <p class="val">@Model.Address.SentCount.ToString("N2")</p>
                    <h3>Total</h3>
                    <p class="val">@((Model.Address.ReceivedCount + Model.Address.SentCount).ToString("N2"))</p>
                </div>
                <div class="col-sm-8">
                    <h3>Received</h3>
                    <p class="val">@Model.Address.ReceivedAmount.ToCurrencyString() <span style="font-size: 10px;">NXS</span></p>
                    <h3>Sent</h3>
                    <p class="val">@Model.Address.SentAmount.ToCurrencyString(true) <span style="font-size: 10px;">NXS</span></p>
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-3">
        <div class="panel no-pad">
            <div class="row add-pad">
                <div class="col-xs-6">
                    <h2>QR</h2>
                </div>
                <div class="col-xs-6 text-right">
                    <span class="fa fa-qrcode"></span>
                </div>
            </div>
            <canvas id="qrCode"></canvas>
        </div>
    </div>
</div>

@if (Model.TrustKey != null)
{
    <div class="panel full-length">
        <div class="row visible-xs">
            <div class="col-xs-9">
                <h2>PROOF OF STAKE</h2>
            </div>
            <div class="col-xs-3 text-right">
                <span class="fa fa-bolt"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2 hidden-xs">
                <h2>PROOF OF STAKE</h2>
            </div>
            <div class="col-sm-3">
                <h3>Status</h3>
                <p class="val">Currently Staking</p>
            </div>
            <div class="col-sm-2">
                <h3>Genesis Block</h3>
                <p class="val">
                    <a href="/blocks/@Model.TrustKey.GenesisBlockHeight">@Model.TrustKey.GenesisBlockHeight.ToString("N0", CultureInfo.InvariantCulture)</a>
                </p>
            </div>
            <div class="col-sm-2">
                <h3>Interest Rate</h3>
                <p class="val">@Math.Round(Model.TrustKey.InterestRate, 2).ToString("N2", CultureInfo.InvariantCulture) %</p>
            </div>
            <div class="col-sm-2">
                <h3>Last Block</h3>
                <p class="val">@Model.TrustKey.TimeSinceLastBlock.ToString(@"hh\:mm\:ss")</p>
            </div>
            <div class="col-sm-1 text-right hidden-xs">
                <span class="fa fa-bolt"></span>
            </div>
        </div>
    </div>
}

<div class="panel full-length">
    <div class="row">
        <div class="col-xs-8">
            <h2>BALANCE ACTIVITY</h2>
        </div>
        <div class="col-xs-4 text-right">
            <span class="fa fa-line-chart"></span>
        </div>
    </div>
    <activity-chart :address-hash="addressHash" :height="250"></activity-chart>
</div>

<div class="panel">
    <div class="row">
        <div class="col-xs-8">
            <h2>TRANSACTION HISTORY</h2>
        </div>
        <div class="col-xs-4 text-right">
            <span class="fa fa-list-alt"></span>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-5">
            <div id="sentReceiveButtons" class="form-group">
                <div class="text-toggle">
                    <a href="#" v-on:click.prevent.stop="getHistory(@((int) TransactionType.Both))"
                       v-bind:class="currentFilter == @((int) TransactionType.Both) ? 'active-link' : ''">Sent / Rec<span class="hidden-xs">eived</span></a>
                    <span class="toggle-seperator fa fa-ellipsis-v"></span>
                    <a href="#" v-on:click.prevent.stop="getHistory(@((int) TransactionType.Input))"
                       v-bind:class="currentFilter == @((int) TransactionType.Input) ? 'active-link' : ''">Sent</a>
                    <span class="toggle-seperator fa fa-ellipsis-v"></span>
                    <a href="#" v-on:click.prevent.stop="getHistory(@((int) TransactionType.Output))"
                       v-bind:class="currentFilter == @((int) TransactionType.Output) ? 'active-link' : ''">Received</a>
                </div>
            </div>
        </div>
        <div class="col-sm-7 text-right-sm">
            <form id="txFilter">
                <div class="form-group">
                    <h3>ORDER BY </h3>
                    <select asp-items="Html.GetEnumSelectList<OrderTransactionsBy>()" v-on:change="reloadData()" class="form-control" v-model="filterCriteria.orderBy"></select>
                    <br />
                    <label for="isStaking">
                        <input class="big-checkbox" type="checkbox" value="" id="isStaking" v-on:change="reloadData()" v-model="filterCriteria.isStakeReward">
                        Include rewards
                    </label>
                </div>
            </form>
        </div>
    </div>

    <transaction-table id="addressTxs" ref="txTable"
                       :ajax-url="transactionTableAjaxUrl"
                       :columns="transactionTableColumns"
                       v-on:row-click="selectTransaction"></transaction-table>
</div>

@section Modals {
    @*<div class="modal fade" id="editFavouriteModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Update Favourite</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <span class="text-danger" v-if="errorMessage">{{ errorMessage }}</span>
                    <div class="form-group">
                        <label>Hash</label>
                        <p>{{ bufferItem.hash ? bufferItem.hash : '' }}</p>
                    </div>
                    <div class="form-group">
                        <label>Alias</label>
                        <input class="form-control" v-model="bufferItem.alias" />
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="form-group">
                        <button type="button" class="btn btn-default" v-on:click.prevent.stop="updateFavourite">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>*@
}

@section Scripts {
    <script language="javascript" src="@ViewBag.ControllerJs"></script>
    <script language="javascript">
        var vm = new nexplorer.AddressViewModel({
            addressId: @Model.Address.AddressId,
            addressHash: '@Model.Address.Hash',
            addressTxTypes: {
                both: @((int)TransactionType.Both),
                in: @((int)TransactionType.Input),
                out: @((int)TransactionType.Output)
            },
            addressAlias: '@Model.AddressAlias',
            nxsBalance: @Math.Round(Model.Address.Balance, 2),
            usdValue: @Model.NxsCurrency.NXSValue,
            totalTxCount: @(Model.Address.ReceivedCount + Model.Address.SentCount),
            lastBlockSeenTimestamp: @Json.Serialize(Model.LastBlockSeenTimestamp),
            isAddressWatched: @Json.Serialize(Model.IsUserFavourite)
        });
    </script>
}
